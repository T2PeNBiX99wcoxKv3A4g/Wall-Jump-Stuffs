import org.jetbrains.dokka.gradle.DokkaTaskPartial

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
}

base {
    archivesName = "${modId}-${project.name}-${libs.versions.minecraft.get()}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
    withSourcesJar()
    withJavadocJar()
}

kotlin {
    jvmToolchain(Integer.parseInt(libs.versions.java.get()))
}

repositories {
    mavenCentral()
    // https://docs.gradle.org/current/userguide/declaring_repositories.html#declaring_content_exclusively_found_in_one_repository
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups('org.spongepowered') }
    }
    exclusiveContent {
        forRepositories(
                maven {
                    name = 'ParchmentMC'
                    url = 'https://maven.parchmentmc.org/'
                },
                maven {
                    name = "NeoForge"
                    url = 'https://maven.neoforged.net/releases'
                }
        )
        filter { includeGroup('org.parchmentmc.data') }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        name = 'FzzyMaven'
        url = 'https://maven.fzzyhmstrs.me/'
    }
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${project.name}:$version")
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$modId-${project.name}-${libs.versions.minecraft.get()}:$version")
        capability("$group:$modId:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

sourcesJar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${modName}" }
    }
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${modName}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : modName,
                'Specification-Vendor'  : modAuthor,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : modAuthor,
                'Built-On-Minecraft'    : libs.versions.minecraft.get()
        ])
    }
}

tasks.withType(DokkaTaskPartial).configureEach {
    dokkaSourceSets.configureEach {
        includeNonPublic = false
        skipDeprecated = false
        reportUndocumented = false
        jdkVersion = Integer.parseInt(libs.versions.java.get())
        sourceRoots.from(sourceSets.main.allSource)
    }
}

// Prevent the default javadoc task from running, as Dokka is
// responsible for generating the docs now
tasks.named("javadoc", Javadoc) {
    enabled = false
}

// Make the javadoc jar take in the Dokka output
tasks.named("javadocJar", Jar) {
    dependsOn(tasks.named("dokkaJavadoc"))
    from(tasks.named("dokkaJavadoc"))
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processResources {
    var expandProps = [
            'version'                       : version,
            'group'                         : project.group, //Else we target the task's group.
            'minecraft_version'             : libs.versions.minecraft.get(),
            'minecraft_version_range'       : libs.versions.minecraftRange.get(),
            'fabric_version'                : libs.versions.fabricApi.get(),
            'fabric_loader_version'         : libs.versions.fabricLoader.get(),
            'fabric_kotlin_loader_version'  : libs.versions.flk.get(),
            'mod_name'                      : modName,
            'mod_author'                    : modAuthor,
            'mod_id'                        : modId,
            'license'                       : license,
            'description'                   : project.description,
            "forge_version"                 : libs.versions.forge.get(),
            "forge_loader_version_range"    : libs.versions.forgeRange.get(),
            "kotlin_for_forge_version_range": libs.versions.kffRange.get(),
            'credits'                       : credits,
            'java_version'                  : libs.versions.java.get(),
            'fzzy_config_fabric_version'    : libs.versions.fzzyConfigFabric.get(),
            'fzzy_config_version_range'     : libs.versions.fzzyConfigRange.get()
    ]

    var jsonExpandProps = expandProps.collectEntries {
        key, value -> [(key): value instanceof String ? value.replace("\n", "\\\\n") : value]
    }

    filesMatching(['META-INF/mods.toml']) {
        expand expandProps
    }

    filesMatching(['pack.mcmeta', 'fabric.mod.json', '*.mixins.json']) {
        expand jsonExpandProps
    }

    inputs.properties(expandProps)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv('local_maven_url')
        }
    }
}
